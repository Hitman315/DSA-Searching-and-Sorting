Method 1:

class Solution {
public:
    double findMedianSortedArrays(vector<int>& nums1, vector<int>& nums2) {
        int i=0;
        int j=0;
        int n1=nums1.size();
        int n2=nums2.size();
        vector<int>v;
        while(i<n1 && j<n2){
            if(nums1[i]<=nums2[j]){
                v.push_back(nums1[i]);
                i++;
            }else{
                v.push_back(nums2[j]);
                j++;
            }
        }
        for(;i<n1;i++){
            v.push_back(nums1[i]);
        }
        for(;j<n2;j++)
            v.push_back(nums2[j]);
        
        int n3=v.size();
        int low=0;
        int high=n3-1;
        int mid=(low+high)/2;
        double median;
        if(n3%2!=0)
            median=v[mid];
        else
            
        median=(v[mid]+v[mid+1])/2.0;
        
        return median;
    }
};

Method 2:

class Solution {
public:
    double findMedianSortedArrays(vector<int>& nums1, vector<int>& nums2) {
        int i=0;
        int j=0;
        int n1=nums1.size();
        int n2=nums2.size();
        vector<int>v;
        for(int i=0;i<n1;i++){
                v.push_back(nums1[i]);
        }
        for(int i=0;i<n2;i++){
            
                v.push_back(nums2[i]);
    }
       sort(v.begin(),v.end());
        
        int n3=v.size();
        int low=0;
        int high=n3-1;
        int mid=(low+high)/2;;
        double median;
        if(n3%2==0){
            median=(v[mid]+v[mid+1])/2.0;
    }
        else{
            median=v[mid];
}
        
        return median;
    }
};